apiVersion: v1
kind: ConfigMap
metadata:
  name: pipeline-yaml-cm
  namespace: ai-example-training
data:
  pipeline.yaml: |
    # PIPELINE DEFINITION
    # Name: pipeline-fetch-chunk-embed-store-vector-db
    components:
      comp-chunk-embed-and-store:
        executorLabel: exec-chunk-embed-and-store
        inputDefinitions:
          artifacts:
            input_file:
              artifactType:
                schemaTitle: system.Artifact
                schemaVersion: 0.0.1
      comp-fetch-from-minio:
        executorLabel: exec-fetch-from-minio
        inputDefinitions:
          parameters:
            bucket_name:
              parameterType: STRING
            file_key:
              parameterType: STRING
            minio_access_key:
              parameterType: STRING
            minio_endpoint:
              parameterType: STRING
            minio_secret_key:
              parameterType: STRING
        outputDefinitions:
          artifacts:
            output_file:
              artifactType:
                schemaTitle: system.Artifact
                schemaVersion: 0.0.1
    deploymentSpec:
      executors:
        exec-chunk-embed-and-store:
          container:
            args:
            - --executor_input
            - '{{$}}'
            - --function_to_execute
            - chunk_embed_and_store
            command:
            - sh
            - -c
            - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
              \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
              \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.9.0'\
              \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
              \  python3 -m pip install --quiet --no-warn-script-location 'pdfplumber'\
              \ 'numpy' 'pymupdf' 'llama-stack-client==0.1.9' 'pandas' 'llama-stack' 'httpx'\
              \ 'numpy' 'psycopg2' 'sentence-transformers' 'huggingface_hub==0.14.1' &&\
              \ \"$0\" \"$@\"\n"
            - sh
            - -ec
            - 'program_path=$(mktemp -d)


              printf "%s" "$0" > "$program_path/ephemeral_component.py"

              _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

              '
            - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
              \ *\n\ndef chunk_embed_and_store(\n    input_file: InputPath(), \n):\n \
              \   from llama_stack_client import LlamaStackClient\n    from llama_stack_client\
              \ import Agent, AgentEventLogger, RAGDocument\n    import pandas as pd\n\
              \    from sentence_transformers import SentenceTransformer\n    import json\n\
              \    import os\n    from sentence_transformers import SentenceTransformer\n\
              \    import pdfplumber\n    import numpy as np\n\n    print(f\"Reading PDF\
              \ from: {input_file}\")\n    full_text = \"\"\n\n    with pdfplumber.open(input_file)\
              \ as pdf:\n        for page in pdf.pages:\n            page_text = page.extract_text()\n\
              \            if page_text:\n                full_text += page_text\n\n \
              \   # Cleaning data\n    full_text = full_text.encode('utf-8', 'ignore').decode('utf-8')\n\
              \    full_text = full_text.replace('\\x00', '')\n\n    if not full_text.strip():\n\
              \        raise ValueError(\"No text could be extracted from the PDF.\")\n\
              \n\n    rng = np.random.default_rng()\n    random_id = rng.integers(1000,\
              \ 9999)\n\n    document = RAGDocument(\n        document_id=f\"pdf-{random_id}-1\"\
              ,\n        content=full_text,\n        mime_type=\"application/pdf\",\n\
              \        metadata={\"source\": \"rag-pipeline\", \"filename\": os.path.basename(input_file)},\n\
              \    )\n\n\n    client = LlamaStackClient(base_url=\"http://llamastack.llama-stack-rag-2.svc.cluster.local:8321\"\
              )\n\n    vector_db_id = \"my_documents_db_1\"\n\n    response = client.vector_dbs.register(\n\
              \        vector_db_id=\"my_documents_db_1\",\n        embedding_model=\"\
              all-MiniLM-L6-v2\",\n        embedding_dimension=384,\n        provider_id=\"\
              pgvector\",\n    )\n    print(f\"Vector database registered: {response}\"\
              )\n\n    print(\"Inserting document using rag_tool...\")\n    client.tool_runtime.rag_tool.insert(\n\
              \        documents=[document],\n        vector_db_id=\"my_documents_db_1\"\
              ,\n        chunk_size_in_tokens=512,\n    )\n    print(\"Document inserted\
              \ successfully using RAGDocument.\")\n\n"
            image: python:3.10
        exec-fetch-from-minio:
          container:
            args:
            - --executor_input
            - '{{$}}'
            - --function_to_execute
            - fetch_from_minio
            command:
            - sh
            - -c
            - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
              \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
              \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.9.0'\
              \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
              \  python3 -m pip install --quiet --no-warn-script-location 'boto3' 'pandas'\
              \ 'llama-stack' 'httpx' 'numpy' 'psycopg2' 'llama-stack-client==0.1.9' &&\
              \ \"$0\" \"$@\"\n"
            - sh
            - -ec
            - 'program_path=$(mktemp -d)


              printf "%s" "$0" > "$program_path/ephemeral_component.py"

              _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

              '
            - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
              \ *\n\ndef fetch_from_minio(\n    bucket_name: str,\n    file_key: str,\n\
              \    minio_endpoint: str,\n    minio_access_key: str,\n    minio_secret_key:\
              \ str,\n    output_file: OutputPath()\n):\n    import boto3\n    import\
              \ os\n\n    s3 = boto3.client(\n        \"s3\",\n        endpoint_url=minio_endpoint,\n\
              \        aws_access_key_id=minio_access_key,\n        aws_secret_access_key=minio_secret_key\n\
              \    )\n\n    os.makedirs(os.path.dirname(output_file), exist_ok=True)\n\
              \    s3.download_file(bucket_name, file_key, output_file)\n    print(f\"\
              File downloaded to: {output_file}\")\n\n"
            image: python:3.10
    pipelineInfo:
      name: pipeline-fetch-chunk-embed-store-vector-db
    root:
      dag:
        tasks:
          chunk-embed-and-store:
            cachingOptions:
              enableCache: true
            componentRef:
              name: comp-chunk-embed-and-store
            dependentTasks:
            - fetch-from-minio
            inputs:
              artifacts:
                input_file:
                  taskOutputArtifact:
                    outputArtifactKey: output_file
                    producerTask: fetch-from-minio
            taskInfo:
              name: chunk-embed-and-store
          fetch-from-minio:
            cachingOptions:
              enableCache: true
            componentRef:
              name: comp-fetch-from-minio
            inputs:
              parameters:
                bucket_name:
                  runtimeValue:
                    constant: llama
                file_key:
                  runtimeValue:
                    constant: abc.pdf
                minio_access_key:
                  runtimeValue:
                    constant: minio_rag_user
                minio_endpoint:
                  runtimeValue:
                    constant: https://minio-api-llama-stack-rag-2.apps.tsisodia-spark.2vn8.p1.openshiftapps.com
                minio_secret_key:
                  runtimeValue:
                    constant: minio_rag_password
            taskInfo:
              name: fetch-from-minio
    schemaVersion: 2.1.0
    sdkVersion: kfp-2.9.0
